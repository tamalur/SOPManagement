@model SOPManagement.Models.SOPClass


@{


    TempData["PageTitle"] = "SOP Admin";
    Session["ShowTitle"] = "yes";


}

@*<div style="font-size:36px;font-weight:bold">

        @if (ViewBag.Title != null)
        {
            @ViewBag.Title
        }
        else
        {
            @TempData["PageTitle"]
        }

    </div>*@

@using (Html.BeginForm("AdminSOP", "Home", FormMethod.Post, new { @id = "Form1" }))
{

    @Html.AntiForgeryToken()

    <style>
        table {
            border-collapse: collapse;
            width: 60%;
        }

        tr.no-bottom-border td {
            border-bottom: none
        }
    </style>
    <div>


        <p>
            <table>

                <tr>
                    <td class="signoffield">

                        @Html.DisplayNameFor(model => model.FileTitle):

                    </td>
                    <td>
                        @Model.FileTitle
                    </td>
                </tr>

                <tr>
                    <td class="signoffield">
                        @Html.DisplayNameFor(model => model.SOPNo):
                    </td>
                    <td>
                        @Model.SOPNo
                    </td>
                </tr>

                <tr>
                    <td class="signoffield">
                        @Html.DisplayNameFor(model => model.FileUrl):
                    </td>
                    <td>
                        <a href="@Model.FileLink" target="_blank">@Model.FileTitle</a>
                    </td>
                </tr>

                <tr>
                    <td class="signoffield">
                        @Html.DisplayNameFor(model => model.FilePath):
                    </td>
                    <td>
                        @Model.FilePath
                    </td>
                </tr>

                <tr>
                    <td class="signoffield">
                        @Html.DisplayNameFor(model => model.ApprovalStatus):
                    </td>
                    <td>
                        @Model.ApprovalStatus
                    </td>
                </tr>



            </table>
        </p>


        <p>

            <table>
                <tr>
                    <td class="signoffield">
                        @Html.LabelFor(model => model.Updatefreq):

                    </td>
                    <td>
                        @Html.EditorFor(model => model.Updatefreq, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Updatefreq, "", new { @class = "text-danger" })

                    </td>

                </tr>

                <tr>
                    <td class="signoffield">
                        @Html.LabelFor(model => model.Updatefrequnit):

                    </td>

                    <td>
                        @if (ViewBag.updfrequnits != null)
                        {
                            @Html.DropDownListFor(model => model.Updfrequnitcode, new SelectList(ViewBag.updfrequnits, "unitcode", "Unitname", 1), "Please select freq. unit", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Updfrequnitcode, "", new { @class = "text-danger" })
                        }


                    </td>
                </tr>


            </table>
        </p>

        <p>

            <table>
                <tr>
                    <td class="signoffield">
                        SOP Owner:
                    </td>

                </tr>

                <tr>
                    <td>

                        @Html.DropDownListFor(model => model.FileOwnerEmail, new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select SOP owner", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FileOwnerEmail, "", new { @class = "text-danger" })


                    </td>

                </tr>

            </table>
        </p>

        <p>

            <table>
                <tr>
                    <td class="signoffield">
                        SOP Approver:
                    </td>

                </tr>

                <tr>
                    <td>

                        @Html.DropDownListFor(model => model.FileApproverEmail, new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select SOP approver", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.FileApproverEmail, "", new { @class = "text-danger" })


                    </td>

                </tr>

            </table>
        </p>


        <p>

            <table>

                <tr class="no-bottom-border" id="revhrow">
                    <td class="signoffield">
                        SOP Reviewers:
                    </td>

                </tr>
            </table>

            <table id="tblReviewers">
                <thead>


                    <tr>

                        <th>Full Name:</th>

                        <th>Email:</th>

                        <th></th>

                    </tr>

                </thead>

                <tbody>

                    @using (var db = new SOPManagement.Models.RadiantSOPEntities())
                    {

                        foreach (var usr in db.vwSOPReviewers.Where(x => x.fileid == Model.FileID))

                        {

                            <tr>

                                <td> @usr.userfullname </td>

                                <td> @usr.useremailaddress </td>

                                @*<td> @usr.jobtitle </td>*@

                                <td><input type="button" value="Remove" onclick="Remove(this,'#tblReviewers')" /></td>



                            </tr>

                        }
                    }

                </tbody>

                <tfoot>

                    <tr>

                        <td>

                            @Html.DropDownList("userid", new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select a reviewer", new { @id = "ddlEmployees" })
                        </td>




                        <td><input type="button" id="btnAddRvwer" value="Add" /></td>

                    </tr>

                </tfoot>

            </table>



        </p>

        <p>

            <table>

                <tr class="no-bottom-border" id="revhrow">
                    <td class="signoffield">
                        Read Accesss to:
                    </td>

                </tr>
            </table>


            <table>

                <tr>
                    <td class="signoffield">

                        @Html.DisplayNameFor(model => model.AllUsersReadAcc):

                    </td>

                    <td>

                        @Html.CheckBoxFor(model => model.AllUsersReadAcc, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AllUsersReadAcc, "", new { @class = "text-danger" })


                    </td>

                </tr>

                <tr>
                    <td class="signoffield">

                        @Html.DisplayNameFor(model => model.DepartmentName):

                    </td>

                    <td>

                        @Html.DropDownListFor(model => model.DepartmentCode, new SelectList(ViewBag.departments, "sopdeptcode", "sopdeptname"), "Select a department", new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.DepartmentCode, "", new { @class = "text-danger" })


                    </td>

                </tr>


                <tr>
                    <td class="signoffield">

                        @Html.DisplayNameFor(model => model.FileViewers):

                    </td>

                    <td>

                        <table id="tblViewers" style="width:50%">

                            <thead>

                                <tr>

                                    <th>Full Name:</th>

                                    <th>Email:</th>

                                    <th></th>

                                </tr>

                            </thead>

                            <tbody>

                                @using (var db = new SOPManagement.Models.RadiantSOPEntities())
                                {

                                    foreach (var usr in db.vwSOPViewers.Where(x => x.fileid == Model.FileID))

                                    {


                                        <tr>

                                            <td> @usr.userfullname </td>

                                            <td> @usr.useremailaddress </td>

                                            @*<td> @usr.jobtitle </td>*@

                                            <td><input type="button" value="Remove" onclick="Remove(this,'#tblViewers')" /></td>



                                        </tr>

                                    }
                                }

                            </tbody>

                            <tfoot>

                                <tr>

                                    <td>

                                        @Html.DropDownList("userid", new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select a viewer", new { @id = "ddlViewers" })
                                    </td>

                                    <td><input type="button" id="btnAddVwer" value="Add" /></td>

                                </tr>

                            </tfoot>

                        </table>


                    </td>

                </tr>



            </table>


        </p>

        <p>
            <table>

                <tr>
                    <td class="signoffield" colspan="2">
                        Document Archive Control:
                    </td>

                </tr>
                <tr>
                    <td style="width:30%">
                        <label for="sgnagrmnt"> <b>Archive Document: </b> </label>
                        @Html.CheckBoxFor(model => model.SOPArchived, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SOPArchived, "", new { @class = "text-danger" })

                    </td>
                    <td style="border-left:hidden">
                        Note: Remove document from SOP list.
                    </td>

                </tr>
            </table>

        </p>

    </div>


}

<div>

    <p>

        <table>

            <tr>
                @*<td style="text-align:center">

                        @using (Html.BeginForm("AdminSOP", "Home", FormMethod.Post, new { @id = "Form2" }))
                        {
                            <input type="submit" value="Archive" name="archive" id="soparchive" />
                        }
                    </td>*@
                <td style="text-align:center">
                    <input value="Submit Changes" type="submit" onclick="confirmsave();" name="save" id="sopsubmit" />
                </td>
            </tr>

        </table>
    </p>

</div>


<div class="submit-progress hidden" id="progessdiv">

    <div class="row">
        <div class="col-md-3">
            <img src="~/Content/Images/soploading.gif" style="width:55px;height:55px" />
        </div>
        <div class="col-md-9">
            <h5> Please wait while submitting SOP Changes... </h5>
        </div>
    </div>


</div>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


}

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

<script type="text/javascript" src="http://ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js"></script>


@*<script src="~/Scripts/SOP.js"></script>*@

<script>


    //$("body").on("submit", "#Form2", function () {
    //    return confirm("Are you sure you want to archive this SOP?");
    //});

    //window.confirm = function (message) {
    //    var myElementToShow = document.getElementById("sopalert");

    //    var myAlertToShow = document.getElementById("sopalertmsg");

    //    myAlertToShow.innerHTML = '</br>' + message + "</br></br>" + "<input type='button' value='OK' id='btnalertok' onclick='closealertok()' />" + "&nbsp" + "&nbsp" + "&nbsp" + "&nbsp" + "&nbsp" + "&nbsp" + "<input type='button' value='Cancel' id='btnalertcan' onclick='closealertcan()' />";

    //    myElementToShow.style.display = "block";
    //}




        function confirmsave() {

            //confirmmsg('Test');

           // window.confirm("Are you sure to change all SOP admin data?");

            window.confirm("Are you sure to change all SOP admin data?",
                function () {
                    // Do something for yes

                    submitchanges();
                  //  alert('clicked OK');

                },
                function () {
                    // Do something for no
                    //alert('clicked Cancel');
                }
            );


          //  alert(document.getElementById("cinfirmmsg").value);

            //if (answer) {


            //    submitchanges();

            //    return false;
            //}
            //else {

            //    return true;
            //}
        }



    //function closealertok() {

    //    var myElementToShow = document.getElementById("sopalert");

    //    myElementToShow.style.display = "none";

    //  //  alert('ok called');

    //    submitchanges();

    //    //return true;
    //}

    //function closealertcan() {

    //    var myElementToShow = document.getElementById("sopalert");
    //    myElementToShow.style.display = "none";
    //   // alert('cancel called');

    //}



    function submitchanges()
    {

        //validate data entry


        var updfreq = $('#Updatefreq').val();


        if (updfreq == "" || updfreq <= 0 ) {
            alert("Update frequency is required!")
            return true;
        }

        if (updfreq != "" && isNaN(updfreq) == true) {
            alert("Update frequency must be numeric!")
            return true;

        }

        var upfrequnit = $('#Updfrequnitcode :selected').text();
        var updfrequcode = $('#Updfrequnitcode :selected').val();


        if (upfrequnit == "Please select freq. unit" || upfrequnit == "") {
            alert("Update frequency unit is required!")
            return true;
        }

        var owneremail = $('#FileOwnerEmail :selected').val();

        // var owneremail = $('[id$=FileOwnerEmail] option:selected').val();  //it also works


        if (owneremail == "") {
            alert("SOP Owner is required!")
            return true;

        }

        var apporveremail = $('#FileApproverEmail :selected').val();


        if (apporveremail == "") {
            alert("SOP Approver is required!")
            return true;

        }



        //validate and collect data from Reviewers and viewers table


        //collect reviewers and viewers from html tables in javascript array

        var reviewerarr = new Array();

        //Loop through the Table rows and build a reviewers JSON array.

        $("#tblReviewers TBODY TR").each(function () {

            var row = $(this);

            var reviewer = {};

            reviewer.userfullname = row.find("TD").eq(0).html();

            reviewer.useremailaddress = row.find("TD").eq(1).html();

            reviewerarr.push(reviewer);


        });

        if (reviewerarr === undefined || reviewerarr.length == 0) {
            // array empty or does not exist
            alert("Reviewers are required, please add at least one reviewer!");
            return true;
        }

        var rvwrarr = JSON.stringify(reviewerarr);   //this is json data of array to pass to controller through ajax call

        //get view/read access fields

        var chkAllVwrs = document.getElementById("AllUsersReadAcc").checked;

        var vwrdeptcode = $('#DepartmentCode :selected').val();

        //Loop through the viewers Table rows and build a viewers JSON array.

        var viewersarr = new Array();

        $("#tblViewers TBODY TR").each(function () {

            var row = $(this);

            var viewer = {};

            viewer.userfullname = row.find("TD").eq(0).html();

            viewer.useremailaddress = row.find("TD").eq(1).html();

            viewersarr.push(viewer);


        });

        if (chkAllVwrs == false) {

            if (vwrdeptcode == "" && (viewersarr === undefined || viewersarr.length == 0)) {
                // array empty or does not exist
                alert("Please enter at least one viewer with read access!");
                return true;
            }


        }

        var vwrarr = JSON.stringify(viewersarr);  //send json data to controller

        //get archived entry


        var hasarchived = document.getElementById("SOPArchived").checked;


        DisplayProgressMessage(document.getElementById('sopsubmit'), "Processing SOP");

         //submit reviewers, viewers etc. to controler through ajax

           // confirmsave();

            var sop = new FormData();   //to send uploaded file bytes we need to use javascript Formdata object

            sop.append("Updatefreq", updfreq);
            sop.append("Updatefrequnit", upfrequnit);
            sop.append("Updfrequnitcode", updfrequcode);
            sop.append("FileOwnerEmail", owneremail);
            sop.append("FileApproverEmail", apporveremail);
            sop.append("FilereviewersArr", rvwrarr);
            sop.append("AllUsersReadAcc", chkAllVwrs);
            sop.append("DepartmentCode", vwrdeptcode);
            sop.append("FileviewersArr", vwrarr);
            sop.append("SOPArchived", hasarchived);




            $.ajax({
                type: "POST",
                url: "/Home/AdminSOP",
                //data: '{sop: ' + JSON.stringify(sop) + '}',
                data: sop,
                //contentType: "application/json; charset=utf-8",

                processData: false, //send through body, do not want jQuery to automatically convert the data to a query string so I'm setting processData to false.

                contentType: false,  //content type is data type sending from client. It is false for sending file stream to upload file with other form data

                dataType: "json",     //data type that we expect from server
                success: function (response) {  //server sends OK 200 response to the client

                    if (response.redirecturl != null && response.redirecturl != "")
                        window.location.href = response.redirecturl;
                    else {
                        //json field with success and responseText field
                        //alert(response.success has two values success or failure that I did not check here as I have error message in session);
                        //alert(response.responseText)

                        @*window.location.href = '@Url.Action("SOPMessage", "Home")/' + id;*@

                        if (response.success == false && response.responseText == "sessiontimeout")
                            window.location.href = '@Url.Action("logIn", "Home")';

                         else
                            window.location.href = '@Url.Action("SOPMessage", "Home")';

                    }
                },
                failure: function (response) {     // Server errors (500–599). when failed to send desired response
                 //  alert("Server Response Error:"+response.responseText);
                    window.location.href = '@Url.Action("CleintServerErr", "Home")';

                },

                error: function (response) {      //Client errors (400–499) i.e. uploaded file is too big more than 20 MB permitted in web.cofig

                    //Codes other than Http Success codes(200[OK]) will trigger the function in front of error: in client side(ajax).

                    window.location.href = '@Url.Action("CleintServerErr", "Home")';

                }


            });



    }


    function DisplayProgressMessage(ctl, msg) {

        $(ctl).prop("disabled", true).text(msg);
        $(".submit-progress").removeClass("hidden");
        $("body").addClass("submit-progress-bg");
        setTimeout(function () {
            $(".submit-progress").removeClass("hidden");
        }, 1);

        return true;
    }






    $("body").on("click", "#btnAddRvwer", function () {


        //Get the reference of the Table's TBODY element.

        var tBody = $("#tblReviewers > TBODY")[0];



        var eml = $('#ddlEmployees').val();


        var f = searchtable(eml, 'tblReviewers');


        if (f != '') {

            alert('already added');
            return;

        }

        //Add Row.

        var row = tBody.insertRow(-1);

        //Add Name cell.

        var cell = $(row.insertCell(-1));


        cell.html($('#ddlEmployees :selected').text());


        //Add Country cell.

        cell = $(row.insertCell(-1));

        cell.html($('#ddlEmployees').val());

        //Add Button cell.

        cell = $(row.insertCell(-1));

        var btnRemoveRvr = $("<input />");

        btnRemoveRvr.attr("type", "button");

        btnRemoveRvr.attr("onclick", "Remove(this,'#tblReviewers');");

        btnRemoveRvr.val("Remove");

        cell.append(btnRemoveRvr);


    });


    $("body").on("click", "#btnAddVwer", function () {

        //Reference the Name and Country TextBoxes.


        var txtName = $("#txtName");

        var txtEmail = $("#txtEmail");

        var txtEmail = $('#ddlViewers').val();


        //To get the currently selected text:
        // $('#dropDownId :selected').text();



        //Get the reference of the Table's TBODY element.

        var tBody = $("#tblViewers > TBODY")[0];


        var eml = $('#ddlViewers').val();

        var f = searchtable(eml, 'tblViewers');



        // document.getElementById("ddlEmployees").contains(eml);

        if (f != '') {

            alert('already added');
            return;

        }

        //Add Row.

        var row = tBody.insertRow(-1);



        //Add Name cell.

        var cell = $(row.insertCell(-1));

        cell.html($('#ddlViewers :selected').text());


        //Add Country cell.

        cell = $(row.insertCell(-1));

        cell.html($('#ddlViewers').val());



        //Add Button cell.

        cell = $(row.insertCell(-1));

        var btnRemoveVwr = $("<input />");

        btnRemoveVwr.attr("type", "button");

        btnRemoveVwr.attr("onclick", "Remove(this,'#tblViewers');");

        btnRemoveVwr.val("Remove");

        cell.append(btnRemoveVwr);



        //Clear the TextBoxes.

        txtName.val("");


    });


    function searchtable(eml, tblname) {

        var tab = document.getElementById(tblname);
        var l = tab.rows.length;
        var s = '';
        for (var i = 0; i < l; i++) {
            var tr = tab.rows[i];
            var cll = tr.cells[1];

            if (cll.innerText.indexOf(eml) != -1) {
                //document.write(i + 1);

                s = 'found';
                break;
            }
        }

        return s;

    }

    function Remove(button, tableid) {

        //Determine the reference of the Row using the Button.

        window.clearTimeout(window.timeoutHandle);
        window.timeoutHandle = window.setTimeout("SessionEnd()", window.sTimeout);

        var row = $(button).closest("TR");

        var name = $("TD", row).eq(0).html();

        window.confirm("Do you want to delete: " + name,
            function () {
                // Do something for yes

                // alert('clicked OK');
                var table = $(tableid)[0];

                //Delete the Table row using it's Index.

                table.deleteRow(row[0].rowIndex);


            },
            function () {
                // Do something for No
                // alert('clicked Cancel');
            }
        );




        //   if (confirm("Do you want to delete: " + name)) {

        //            //Get the reference of the Table.

        //            // var table = $("#tblReviewers")[0];

        //            var table = $(tableid)[0];



        //    //Delete the Table row using it's Index.

        //    table.deleteRow(row[0].rowIndex);

        //}

    };



    function DisplayProgressMessage(ctl, msg) {

        $(ctl).prop("disabled", true).text(msg);
        $(".submit-progress").removeClass("hidden");
        $("body").addClass("submit-progress-bg");
        setTimeout(function () {
            $(".submit-progress").removeClass("hidden");
        }, 1);

        return true;
    }


    function hasAlpha(str) {
        var code, i, len;

        for (i = 0, len = str.length; i < len; i++) {
            code = str.charCodeAt(i);
            if (code > 64 && code < 91)  // upper alpha (A-Z)
                return true;
        }
        return false;
    };


    function isAlphaNumeric(str) {
        var code, i, len;

        for (i = 0, len = str.length; i < len; i++) {
            code = str.charCodeAt(i);
            if (!(code > 47 && code < 58) && // numeric (0-9)
                !(code > 64 && code < 91) && // upper alpha (A-Z)
                !(code > 96 && code < 123)) { // lower alpha (a-z)
                return false;
            }
        }
        return true;
    };

    function zeroPad(num, places) {
        var zero = places - num.toString().length + 1;
        return Array(+(zero > 0 && zero)).join("0") + num;
    };





</script>