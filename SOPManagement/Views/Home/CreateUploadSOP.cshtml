@model SOPManagement.Models.SOPClass


@using (Html.BeginForm("CreateUploadSOP", "Home", FormMethod.Post))

{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Upload or Create SOP</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.UploadedFile, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.UploadedFile, null, new { type = "file", @class = "form-control" })
      
        </div>
    </div>

    <div class="form-group">

        @*@HtmlFor.Label(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })*@
        @Html.Label("New File Name", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })


        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.FolderName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @*@Html.EditorFor(model => model.FolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FolderName, "", new { @class = "text-danger" })*@

            @if (ViewBag.ddlDeptFolders != null)
            {
                @Html.DropDownListFor(model => model.FolderName, ViewBag.ddlDeptFolders as SelectList, "Please select a folder", new { @class = "form-control" })
            }


        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.SubFolderName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @*@Html.EditorFor(model => model.SubFolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SubFolderName, "", new { @class = "text-danger" })*@

            @Html.DropDownListFor(model => model.SubFolderName, new SelectList(""), "Please select a subfolder", new { @class = "form-control" })

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SOPNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SOPNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.SOPNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SOPEffectiveDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SOPEffectiveDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
            @Html.ValidationMessageFor(model => model.SOPEffectiveDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Updatefreq, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Updatefreq, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Updatefreq, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        @Html.LabelFor(model => model.Updatefrequnit, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.Updatefrequnit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Updatefrequnit, "", new { @class = "text-danger" })*@


            @if (ViewBag.updfrequnits != null)
            {
                @Html.DropDownListFor(model => model.Updatefrequnit, new SelectList(ViewBag.updfrequnits, "unitcode", "Unitname"), "Please select freq. unit", new { @class = "form-control" })
            }

        </div>
    </div>

    <div class="form-group">
        @Html.Label("SOP Owner", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.FileOwnerEmail, new { htmlAttributes = new { @class = "form-control" } })*@

            @Html.DropDownListFor(model => model.FileOwnerEmail, new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select SOP owner", new { @class = "form-control"})
            @Html.ValidationMessageFor(model => model.FileOwnerEmail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("SOP Approver", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.FileApproverEmail, new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select SOP approver", new { @class = "form-control"})
            @Html.ValidationMessageFor(model => model.FileApproverEmail, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">

        @Html.Label("Add Reviewers", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <table id="tblReviewers" class="table" cellpadding="0" cellspacing="0">

                <thead>

                    <tr>

                        <th style="width:150px">Full Name</th>

                        <th style="width:150px">Email</th>

                        @*<th style="width:150px">Job Title</th>*@

                        <th></th>

                    </tr>

                </thead>

                <tbody>

                    @using (var db = new SOPManagement.Models.RadiantSOPEntities())
                    {

                        foreach (var usr in db.vwSOPReviewers.Where(x => x.fileid == -1))

                        {
                            //  if (usr.fileid == 63)

                            // {


                            <tr>

                                <td> @usr.userfullname </td>

                                <td> @usr.useremailaddress </td>

                                @*<td> @usr.jobtitle </td>*@

                                <td><input type="button" value="Remove" onclick="Remove(this,'#tblReviewers')" /></td>



                            </tr>
                            //   }

                        }
                    }

                </tbody>

                <tfoot>

                    <tr>

                        <td>

                            @Html.DropDownList("userid", new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select", new { @id = "ddlEmployees" })
                        </td>




                        <td colspan="2"><input type="button" id="btnAddRvwer" value="Add" /></td>

                    </tr>

                </tfoot>

            </table>

        </div>
    </div>


    <div class="form-group">
        @Html.Label("Read Access to All", htmlAttributes: new { @class = "control-label col-md-2" })

        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.AllUsersReadAcc, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AllUsersReadAcc, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Read Access to a Department", htmlAttributes: new { @class = "control-label col-md-2" })

        <div class="col-md-10">
            @Html.DropDownListFor(model => model.DepartmentCode, new SelectList(ViewBag.departments, "departmentcode", "departmentname"), "Select a department", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DepartmentCode, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">

        @Html.Label("Add Viewers", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <table id="tblViewers" class="table" cellpadding="0" cellspacing="0">

                <thead>

                    <tr>

                        <th style="width:150px">Full Name</th>

                        <th style="width:150px">Email</th>

                        @*<th style="width:150px">Job Title</th>*@

                        <th></th>

                    </tr>

                </thead>

                <tbody>

                    @using (var db = new SOPManagement.Models.RadiantSOPEntities())
                    {

                        foreach (var usr in db.vwSOPReviewers.Where(x => x.fileid == -1))

                        {
                            //  if (usr.fileid == 63)

                            // {


                            <tr>

                                <td> @usr.userfullname </td>

                                <td> @usr.useremailaddress </td>

                                @*<td> @usr.jobtitle </td>*@

                                <td><input type="button" value="Remove" onclick="Remove(this,'#tblViewers')" /></td>



                            </tr>
                            //   }

                        }
                    }

                </tbody>

                <tfoot>

                    <tr>

                        <td>

                            @Html.DropDownList("userid", new SelectList(ViewBag.employees, "useremailaddress", "userfullname"), "Please select a viewer", new { @id = "ddlViewers" })
                        </td>




                        <td colspan="2"><input type="button" id="btnAddVwer" value="Add" /></td>

                    </tr>

                </tfoot>

            </table>

        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @*<input type="submit" value="Create" id="btnSubmit" onclick="submit();" class="btn btn-default" />*@
        
          
        </div>
    </div>

</div>
    }

<div class="container">
    <div class="col-md-12">  <button onclick="submit()">Submit Form</button> </div>

</div>


    @*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@
 


    @*javascript codes*@

    <script src="~/Scripts/jquery-3.3.1.min.js"></script>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")


    }

    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

    <script type="text/javascript" src="http://ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js"></script>


    <script>


        $(document).ready(function () {

            @*window.location.href = '@Url.Action("CreateUploadSOPAuth", "Home")';*@


            $("#FolderName").change(function () {

                var ifoldername = $(this).val();

                $.ajax(
                    {

                        type: "post",
                        url: "/Home/GetSubFolderList?foldername=" + ifoldername,
                        contentType: "html",
                        success: function (response) {
                            //  debugger
                            $("#SubFolderName").empty();
                            $("#SubFolderName").append(response);

                        }  //end success

                    })    //end ajax call function for getting subfolders by selected folder


                $.ajax(
                    {

                        type: "post",
                        url: "/Home/GetSOPNO",
                        contentType: 'application/json',
                        dataType: 'json',
                        data: JSON.stringify({ foldername: ifoldername, subfoldername: "" }),

                        success: function (data) {
                            //  debugger
                            if (data.success) {

                                //  document.getElementById("newsopno").value = data.sopno;


                                var n1 = ifoldername.indexOf("(");

                                var n2 = ifoldername.indexOf(")");


                                var sopcode = ifoldername.substring(n1 + 1, n2);

                                var currsopno = parseInt(data.sopno) + 1;

                                newsopno = sopcode + "-" + zeroPad(currsopno, 2);
                                document.getElementById("SOPNo").value = newsopno;


                            }
                            else {
                                alert('invalid SOP' + data.success);
                            }
                        }
                    })  //end ajax call for getting new SOPNo by folder name

            })   //end folder change function

            $("#SubFolderName").change(function () {

                var ifoldername = $('#FolderName :selected').text()
                var isubfoldername = $('#SubFolderName :selected').text();

                $.ajax(
                    {
                        type: "post",
                        url: "/Home/GetSOPNO",
                        contentType: 'application/json',
                        dataType: 'json',
                        data: JSON.stringify({ foldername: ifoldername, subfoldername: isubfoldername }),

                        success: function (data) {
                            //  debugger

                            if (data.success) {

                                var n1 = isubfoldername.indexOf("(");

                                var n2 = isubfoldername.indexOf(")");

                                var sopcode = isubfoldername.substring(n1 + 1, n2);

                                var currsopno = parseInt(data.sopno) + 1;

                                newsopno = sopcode + "-" + zeroPad(currsopno, 2);
                                document.getElementById("SOPNo").value = newsopno;

                            }
                            else {
                                alert('invalid SOP' + data.success);
                            }

                        }  //end success
                    }) //end ajax call to get new sopno by subfolder



            })  //end Change event of sunfolder to get new sop no

        });    //end document.ready function


        function zeroPad(num, places) {
            var zero = places - num.toString().length + 1;
            return Array(+(zero > 0 && zero)).join("0") + num;
        }

      

        $("body").on("click", "#btnAddRvwer", function () {


            //Get the reference of the Table's TBODY element.

            var tBody = $("#tblReviewers > TBODY")[0];


            var eml = $('#ddlEmployees').val();

            var f = searchtable(eml, 'tblReviewers');


            if (f != '') {

                alert('already added');
                return;

            }

            //Add Row.

            var row = tBody.insertRow(-1);



            //Add Name cell.

            var cell = $(row.insertCell(-1));


            cell.html($('#ddlEmployees :selected').text());


            //Add Country cell.

            cell = $(row.insertCell(-1));

            //cell.html(txtEmail.val());

            cell.html($('#ddlEmployees').val());



            //Add Button cell.

            cell = $(row.insertCell(-1));

            var btnRemoveRvr = $("<input />");

            btnRemoveRvr.attr("type", "button");

            btnRemoveRvr.attr("onclick", "Remove(this,'#tblReviewers');");

            btnRemoveRvr.val("Remove");

            cell.append(btnRemoveRvr);


        });


        $("body").on("click", "#btnAddVwer", function () {

            //Reference the Name and Country TextBoxes.


            var txtName = $("#txtName");

            var txtEmail = $("#txtEmail");

            var txtEmail = $('#ddlViewers').val();


            //To get the currently selected text:
            // $('#dropDownId :selected').text();



            //Get the reference of the Table's TBODY element.

            var tBody = $("#tblViewers > TBODY")[0];


            var eml = $('#ddlViewers').val();

            var f = searchtable(eml, 'tblViewers');


            //alert(f);

            // document.getElementById("ddlEmployees").contains(eml);

            if (f != '') {

                alert('already added');
                return;

            }

            //Add Row.

            var row = tBody.insertRow(-1);



            //Add Name cell.

            var cell = $(row.insertCell(-1));

            //cell.html(txtName.val());

            cell.html($('#ddlViewers :selected').text());

            //$('#ddlEmployees :selected').text();



            //Add Country cell.

            cell = $(row.insertCell(-1));

            //cell.html(txtEmail.val());

            cell.html($('#ddlViewers').val());



            //Add Button cell.

            cell = $(row.insertCell(-1));

            var btnRemoveVwr = $("<input />");

            btnRemoveVwr.attr("type", "button");

            //btnRemove.attr("onclick", "Remove(this);");
            btnRemoveVwr.attr("onclick", "Remove(this,'#tblViewers');");

            btnRemoveVwr.val("Remove");

            cell.append(btnRemoveVwr);



            //Clear the TextBoxes.

            txtName.val("");

            // txtEmail.val("");famnb1932


        });


        function searchtable(eml, tblname) {

            var tab = document.getElementById(tblname);
            var l = tab.rows.length;
            var s = '';
            for (var i = 0; i < l; i++) {
                var tr = tab.rows[i];
                var cll = tr.cells[1];

                if (cll.innerText.indexOf(eml) != -1) {
                    //document.write(i + 1);

                    s = 'found';
                    break;
                }
            }

            return s;

        }

         function Remove(button, tableid) {

            //Determine the reference of the Row using the Button.

            window.clearTimeout(window.timeoutHandle);
            window.timeoutHandle = window.setTimeout("SessionEnd()", window.sTimeout);

            var row = $(button).closest("TR");

            var name = $("TD", row).eq(0).html();

            if (confirm("Do you want to delete: " + name)) {

                //Get the reference of the Table.

                // var table = $("#tblReviewers")[0];

                var table = $(tableid)[0];



                //Delete the Table row using it's Index.

                table.deleteRow(row[0].rowIndex);

            }

        };

                         
        function submit() {

            //extract and validate all fields by id for submitting to controller model through ajax
            //we are using ajax becuase we need to send array that is difficult through submit type without javascript array
            //code wriiten by Tamalur on April 19, 2020

            var fileuploaded = document.getElementById("UploadedFile").files[0];

            var filenamenew = $("#FileName").val()

            if (document.getElementById("UploadedFile").files.length > 0 && filenamenew != "")
            {
            alert("Please either upload a file or enter new file name, not both!");
            return true;
            }

            if (document.getElementById("UploadedFile").files.length == 0 && filenamenew == "") {
                alert("Please upload a file or enter new file name!");
                return true;
            }

            var deptfoldernm = $('#FolderName :selected').text();
            var deptsubfoldernm = $('#SubFolderName :selected').text();

           
            if (deptfoldernm == "Please select a folder" || deptfoldernm == "" ) {
                alert("Folder name is required!")
                return true;
            }

            var sopnonew = $('#SOPNo').val();     //document.getElementById("SOPNo").value;

            if (sopnonew == "") {
                alert("SOP No is required!")
                return true;

            }

            var sopeffdate = $('#SOPEffectiveDate').val();

             if (sopeffdate == "") {
                alert("SOP Effective date is required!")
                return true;
            }

            var updfreq = $('#Updatefreq').val();

         
            if (updfreq == "") {
                alert("Update frequency is required!")
                return true;
            }

            if (updfreq != "" && isNaN(updfreq) == true) {
                alert("Update frequency must be numeric!")
                return true;

            }

            var upfrequnit = $('#Updatefrequnit :selected').text();

            if (upfrequnit == "Please select freq. unit" || upfrequnit == "") {
                alert("Update frequency unit is required!")
                return true;
            }

           // var owneremail = $('#ddlSOPOwners').val();

            var owneremail = $('#FileOwnerEmail :selected').val();

           // var owneremail = $('[id$=FileOwnerEmail] option:selected').val();  //it also works


            if (owneremail == "") {
                alert("SOP Owner is required!")
                return true;

            }

            var apporveremail = $('#FileApproverEmail :selected').val();


            if (apporveremail == "") {
                alert("SOP Approver is required!")
                return true;

            }
           

            //collect reviewers and viewers from html tables in array 
            var reviewerarr = new Array();
            //Loop through the Table rows and build a reviewers JSON array.

            $("#tblReviewers TBODY TR").each(function () {

                var row = $(this);

                var reviewer = {};

                reviewer.userfullname = row.find("TD").eq(0).html();

                reviewer.useremailaddress = row.find("TD").eq(1).html();

                reviewerarr.push(reviewer);


            });

            if (reviewerarr === undefined || reviewerarr.length == 0) {
                // array empty or does not exist
                alert("Reviewers are required, plesae add at least one reviewer!");
                return true;
            }

            var rvwrarr = JSON.stringify(reviewerarr);

            //get read access fields

            var chkAllVwrs = document.getElementById("AllUsersReadAcc").checked;

            var vwrdeptcode =$('#DepartmentCode :selected').val();

            //Loop through the viewers Table rows and build a viewers JSON array.

            var viewersarr = new Array();

            $("#tblViewers TBODY TR").each(function () {

                var row = $(this);

                var viewer = {};

                viewer.userfullname = row.find("TD").eq(0).html();

                viewer.useremailaddress = row.find("TD").eq(1).html();

                viewersarr.push(viewer);


            });

            //alert(chkAllVwrs);
            //alert(vwrdeptcode);
            //alert(viewersarr);
            //alert(viewersarr.length);

            if (chkAllVwrs == false) {

                if (vwrdeptcode == "" && (viewersarr === undefined || viewersarr.length == 0)) {
                    // array empty or does not exist
                    alert("Plesae add at least one viewer!");
                    return true;
                }


            }
      
            var vwrarr = JSON.stringify(viewersarr);

          //  alert(vwrarr);


            //posting data to model through $.post method
            //var data = {

            //    FileCurrVersion: $('#newsopno').val(),
            //    FilereviewersArr: rvwrarr

            //};

    
         //   $.post("/Home/CreateUploadSOP", { sop: data }, function () { alert('Successfully Saved') });


            //map all values to model field to pass to controller. we did not need this if we did not use ajax call
            // we used ajax becuase sending reviewers and viewers arrays without ajax is very difficult
   
            var sop = new FormData();   //to send upload file bytes we need to use Formdata object

            sop.append("UploadedFile", fileuploaded);
            sop.append("FileName", filenamenew);
            sop.append("FolderName", deptfoldernm);
            sop.append("SubFolderName", deptsubfoldernm);
            sop.append("SOPNo", sopnonew);
            sop.append("SOPEffectiveDate", sopeffdate);
            sop.append("Updatefreq", updfreq);
            sop.append("Updatefrequnit", upfrequnit);
            sop.append("FileOwnerEmail", owneremail);
            sop.append("FileApproverEmail", apporveremail);
            sop.append("FilereviewersArr", rvwrarr);
            sop.append("AllUsersReadAcc", chkAllVwrs);
            sop.append("DepartmentCode", vwrdeptcode);
            sop.append("FileviewersArr", vwrarr);


            $.ajax({
                type: "POST",
                url: "/Home/CreateUploadSOP",
                //data: '{sop: ' + JSON.stringify(sop) + '}',
                data: sop,
                //contentType: "application/json; charset=utf-8",

                processData: false, //do not want jQuery to automatically convert the data to a query string so I'm setting processData to false.

                contentType: false, 

                dataType: "json",
                success: function (response) {  //server sends OK 200 response to the client
                    
                    //alert(response.redirecturl);

                    if (response.redirecturl != null && response.redirecturl!="")
                        window.location.href = response.redirecturl;
                    else 
                        alert(response.responseText);
                },
                failure: function (response) {
                    alert(response.responseText);

                },
                error: function (response) {

                  //  window.location.href = response.redirect;
                    
                     alert(response.responseText);
                    //Codes other than Http Success codes(200[OK]) will trigger the function in front of error: in client side(ajax).
                }

                //error: function (httpRequest, textStatus, errorThrown) {  // detailed error messsage 
                //    alert("Error: " + textStatus + " " + errorThrown + " " + httpRequest);
                //}

            });


        }
    </script>
